// generated by info.scce.dime.generator.rest.SelectiveControllerGenerator
package de.ls5.dywa.generated.rest.controller;

@javax.transaction.Transactional
@javax.enterprise.context.RequestScoped
public class TileREST {

	@javax.inject.Inject
	private info.scce.dime.rest.ObjectCache objectCache;
	@javax.inject.Inject
	private de.ls5.dywa.generated.util.DomainFileController DomainFileController;
	
	
	@javax.inject.Inject
	private de.ls5.dywa.generated.rest.controller.TileREST TileREST;
	@javax.inject.Inject
	private de.ls5.dywa.generated.controller.dime__HYPHEN_MINUS__models.app.TileController TileController;
	@javax.inject.Inject
	private de.ls5.dywa.generated.rest.controller.BoardREST BoardREST;
	@javax.inject.Inject
	private de.ls5.dywa.generated.controller.dime__HYPHEN_MINUS__models.app.BoardController BoardController;

	public long create(final java.lang.String name) {
		final de.ls5.dywa.generated.entity.dime__HYPHEN_MINUS__models.app.Tile obj = this.TileController.create(name);
		return obj.getDywaId();
	}

	



	public void update_TileSelective(final de.ls5.dywa.generated.rest.types.Tile value) {

		final de.ls5.dywa.generated.entity.dime__HYPHEN_MINUS__models.app.Tile obj = this.TileController.read(value.getDywaId());
		
		this.update_TileSelective(value, obj);
	}

	public void update_TileSelective(final de.ls5.dywa.generated.rest.types.Tile value, final de.ls5.dywa.generated.entity.dime__HYPHEN_MINUS__models.app.Tile obj) {

		// for updates, consider a special selective so we don't clash with read-operations
		if (this.objectCache.containsSelective(obj, "TileSelective")) {
			// We are already getting updated by someone else
			return;
		}
		else {
			// we don't care for the actual value. key alone is sufficient enough for detection of cycles
			this.objectCache.putSelective(obj, "TileSelective");
		}

		if (value.isDywaNameSet()) {
			obj.setDywaName(value.getDywaName());
		}

		{
			final de.ls5.dywa.generated.rest.types.Tile effectiveValue = value;
			final de.ls5.dywa.generated.entity.dime__HYPHEN_MINUS__models.app.Tile effectiveObj = obj;

		// If values were not specified, ignore them
		if (effectiveValue.isboardSet()) {
			checkVersion(value, obj);
			if (effectiveValue.getboard() == null) {
				effectiveObj.setboard(null);
			}
			else {
				final de.ls5.dywa.generated.entity.dime__HYPHEN_MINUS__models.app.Board
				 entity;
				final de.ls5.dywa.generated.rest.types.Board
				 item = effectiveValue.getboard();
			
				// create new
				if (item.getDywaId() == info.scce.dime.util.Constants.DYWA_ID_CREATE_NEW) {
					if (! (item instanceof de.ls5.dywa.generated.rest.types.Board)) {
						throw new java.lang.IllegalArgumentException("Runtime type does not match model type");
					}
				
					final java.lang.String dywaName;
					if (item.getDywaName() == null || item.getDywaName().isEmpty()) {
						dywaName = "board";
					} else {
						dywaName = item.getDywaName();
					}
				
					final long id = BoardREST.create(dywaName);
					item.setDywaId(id);
				
					//update_BoardSelective
					this.BoardREST.update_BoardSelective(item);
					entity = this.BoardController.read(item.getDywaId());
				}
				// create transient
				else if (item.getDywaId() == info.scce.dime.util.Constants.DYWA_ID_TRANSIENT) {
					if (! (item instanceof de.ls5.dywa.generated.rest.types.Board)) {
						throw new java.lang.IllegalArgumentException("Runtime type does not match model type");
					}
				
					entity = this.BoardREST.copyToTransient(item);
				}
				// lookup regular object
				else {
					//update_BoardSelective
					this.BoardREST.update_BoardSelective(item);
					entity = this.BoardController.read(item.getDywaId());
				}
			
				effectiveObj.setboard(entity);
			
			}
		}
	}
		{
			final de.ls5.dywa.generated.rest.types.Tile effectiveValue = value;
			final de.ls5.dywa.generated.entity.dime__HYPHEN_MINUS__models.app.Tile effectiveObj = obj;

		// If values were not specified, ignore them
		if (effectiveValue.isxSet()) {
			checkVersion(value, obj);
			effectiveObj.setx(effectiveValue.getx());
		}
	}
		{
			final de.ls5.dywa.generated.rest.types.Tile effectiveValue = value;
			final de.ls5.dywa.generated.entity.dime__HYPHEN_MINUS__models.app.Tile effectiveObj = obj;

		// If values were not specified, ignore them
		if (effectiveValue.isySet()) {
			checkVersion(value, obj);
			effectiveObj.sety(effectiveValue.gety());
		}
	}
		{
			final de.ls5.dywa.generated.rest.types.Tile effectiveValue = value;
			final de.ls5.dywa.generated.entity.dime__HYPHEN_MINUS__models.app.Tile effectiveObj = obj;

		// If values were not specified, ignore them
		if (effectiveValue.iscolourSet()) {
			checkVersion(value, obj);
			effectiveObj.setcolour(effectiveValue.getcolour());
		}
	}
		{
			final de.ls5.dywa.generated.rest.types.Tile effectiveValue = value;
			final de.ls5.dywa.generated.entity.dime__HYPHEN_MINUS__models.app.Tile effectiveObj = obj;

		// If values were not specified, ignore them
		if (effectiveValue.ispopulationSet()) {
			checkVersion(value, obj);
			effectiveObj.setpopulation(effectiveValue.getpopulation());
		}
	}
		{
			final de.ls5.dywa.generated.rest.types.Tile effectiveValue = value;
			final de.ls5.dywa.generated.entity.dime__HYPHEN_MINUS__models.app.Tile effectiveObj = obj;

		// If values were not specified, ignore them
		if (effectiveValue.iscapacitySet()) {
			checkVersion(value, obj);
			effectiveObj.setcapacity(effectiveValue.getcapacity());
		}
	}
	}

	public de.ls5.dywa.generated.entity.dime__HYPHEN_MINUS__models.app.Tile copyToTransient(final de.ls5.dywa.generated.rest.types.Tile value) {

		final de.ls5.dywa.generated.entity.dime__HYPHEN_MINUS__models.app.Tile obj;

		if (this.objectCache.containsTransient(value)) {
			return this.objectCache.getTransient(value);
		}
		else {
			final java.lang.String name;
			if (value.getDywaName() == null || value.getDywaName().isEmpty()) {
				name = "Tile_transient";
			} else {
				name = value.getDywaName();
			}
			obj = TileController.createTransient(name);
			this.objectCache.putTransient(value, obj);
		}

		if (value.isDywaNameSet()) {
			obj.setDywaName(value.getDywaName());
		}

			{
				final de.ls5.dywa.generated.rest.types.Tile effectiveValue = value;
				final de.ls5.dywa.generated.entity.dime__HYPHEN_MINUS__models.app.Tile effectiveObj = obj;

			// If values were not specified, ignore them
			if (effectiveValue.isboardSet()) {
				checkVersion(value, obj);
				if (effectiveValue.getboard() == null) {
					effectiveObj.setboard(null);
				}
				else {
					final de.ls5.dywa.generated.entity.dime__HYPHEN_MINUS__models.app.Board
					 entity;
					final de.ls5.dywa.generated.rest.types.Board
					 item = effectiveValue.getboard();
				
					// create new
					if (item.getDywaId() == info.scce.dime.util.Constants.DYWA_ID_CREATE_NEW) {
						if (! (item instanceof de.ls5.dywa.generated.rest.types.Board)) {
							throw new java.lang.IllegalArgumentException("Runtime type does not match model type");
						}
					
						final java.lang.String dywaName;
						if (item.getDywaName() == null || item.getDywaName().isEmpty()) {
							dywaName = "board";
						} else {
							dywaName = item.getDywaName();
						}
					
						final long id = BoardREST.create(dywaName);
						item.setDywaId(id);
					
						//update_BoardSelective
						this.BoardREST.update_BoardSelective(item);
						entity = this.BoardController.read(item.getDywaId());
					}
					// create transient
					else if (item.getDywaId() == info.scce.dime.util.Constants.DYWA_ID_TRANSIENT) {
						if (! (item instanceof de.ls5.dywa.generated.rest.types.Board)) {
							throw new java.lang.IllegalArgumentException("Runtime type does not match model type");
						}
					
						entity = this.BoardREST.copyToTransient(item);
					}
					// lookup regular object
					else {
						//update_BoardSelective
						this.BoardREST.update_BoardSelective(item);
						entity = this.BoardController.read(item.getDywaId());
					}
				
					effectiveObj.setboard(entity);
				
				}
			}
		}
			{
				final de.ls5.dywa.generated.rest.types.Tile effectiveValue = value;
				final de.ls5.dywa.generated.entity.dime__HYPHEN_MINUS__models.app.Tile effectiveObj = obj;

			// If values were not specified, ignore them
			if (effectiveValue.isxSet()) {
				checkVersion(value, obj);
				effectiveObj.setx(effectiveValue.getx());
			}
		}
			{
				final de.ls5.dywa.generated.rest.types.Tile effectiveValue = value;
				final de.ls5.dywa.generated.entity.dime__HYPHEN_MINUS__models.app.Tile effectiveObj = obj;

			// If values were not specified, ignore them
			if (effectiveValue.isySet()) {
				checkVersion(value, obj);
				effectiveObj.sety(effectiveValue.gety());
			}
		}
			{
				final de.ls5.dywa.generated.rest.types.Tile effectiveValue = value;
				final de.ls5.dywa.generated.entity.dime__HYPHEN_MINUS__models.app.Tile effectiveObj = obj;

			// If values were not specified, ignore them
			if (effectiveValue.iscolourSet()) {
				checkVersion(value, obj);
				effectiveObj.setcolour(effectiveValue.getcolour());
			}
		}
			{
				final de.ls5.dywa.generated.rest.types.Tile effectiveValue = value;
				final de.ls5.dywa.generated.entity.dime__HYPHEN_MINUS__models.app.Tile effectiveObj = obj;

			// If values were not specified, ignore them
			if (effectiveValue.ispopulationSet()) {
				checkVersion(value, obj);
				effectiveObj.setpopulation(effectiveValue.getpopulation());
			}
		}
			{
				final de.ls5.dywa.generated.rest.types.Tile effectiveValue = value;
				final de.ls5.dywa.generated.entity.dime__HYPHEN_MINUS__models.app.Tile effectiveObj = obj;

			// If values were not specified, ignore them
			if (effectiveValue.iscapacitySet()) {
				checkVersion(value, obj);
				effectiveObj.setcapacity(effectiveValue.getcapacity());
			}
		}

		return obj;
	}

	public void delete(final long id) {
		final de.ls5.dywa.generated.entity.dime__HYPHEN_MINUS__models.app.Tile obj = this.TileController.read(id);
		this.TileController.delete(obj);
	}

	private void checkVersion(final de.ls5.dywa.generated.rest.types.Tile value, final de.ls5.dywa.generated.entity.dime__HYPHEN_MINUS__models.app.Tile obj) {
		if (value.isDywaVersionSet() && value.getDywaVersion() != obj.getDywaVersion()) {
			throw new javax.persistence.OptimisticLockException(obj.getDywaName() + '[' + obj.getDywaId() + "] has been updated by other transaction");
		}
	}
}
